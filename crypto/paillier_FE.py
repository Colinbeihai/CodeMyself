import random
import math
import gmpy2 as gp
import numpy as np
import time

from utils import _param_generator
from utils import _random_generator
from utils import safeprimeGen


class FE:
    def __init__(self, eta, sec_param):

        self.eta = eta
        self.sec_param = sec_param

        # self.p = safeprimeGen(self.sec_param // 2 + 4)
        # self.q = safeprimeGen(self.sec_param // 2 - 4)

        self.p = 209194292168855639741337580575258766316271580748879651193745959592608430294099797290610505128006199916394629189900264823262689216586367952040886546841998039
        self.q = 797894215947616471896007302232026706006319418540295988547246400271043379586587191713870600410046392047945664963415567230707683105736368829538527170512499

        self.N = self.p * self.q
        self.N2 = self.N ** 2

        self.g = 26935401696739251248675458945081173391843142045271302806634074842168103750956014634424550916109523818936571040003049111864284112424206815695379201227254414853367019052457005928390379479543907074703494906294798109733700105068806086698621520099040631009742991847253298254450357601473880220028689559406253956868993937108906290734475058701820634376636368994849778212095105959450028670297501454801271217812546017210084998859248742826210046161337383634089012666495848548545785417395183087653174493304254686212182021423802923372470104374491168940011440128500388752622711435769038377354054539862355558097887862657456016376863

        # self.g = _random_generator(self.N)
        self.msk = [random.randint(0, self.N2 - 1) for i in range(self.eta)]
        # self.msk = [18087045435953684224159299021670621031080829583915606489089474878482056220745918905782746491591976455963604826148738968538797992819575882629411077688334714889904416882492594356211815560470691869886518136903173019562702055887247816749636939922627996822194739093696380005705700269226304798013895035157431335376406103261201062873887936632984614119731159159266227082573223459902922827753179802470983173630158640776056309407815035242536580357775590635279156081830166344777770515619610495082490551600229841002955805240694033012407287330238798736186960742249966497446964870287481933661569497209776405767814267057151789272052,
        #     26629611946534436827535995271169868498369876562385384786176023528305350326990925798419460250023112223909007601684971279023155220210681277312605718741075396381689237270516515273719623130508069478296911865016883408144937923492479507481616653537789124628674499411727226163891127013449627600187860054038452531970238355625792426185548240661895719029901453810540362782856941420235908482178767915674976252575459285955278574538175378333965094709639452716610068807700152067609016557147878868375934176655870410238875401384134805067071959882952614758761794846001858207301702305321339898957992716323813769133217598017680199968218,
        #     21007140349626273088566649379094479008236970228596673383346973659408570966172474534616161845462967564353282224311667668588881409575370927832402772685549812572119639410948556907322213216633800982384926099235452049691873282155568808348856825648297746593429463111295154235623309443878114172528465480457495474220611773817696433605240210363665619304289228432327550218245416547001564441698602461642367367528261748117433551356191165837976460476132396077553058474873060699380283468536515230051991093449761687413934192631859813724199500948418584235178271430861080756999138591521286546882986934715820375441831049253500487350368,
        #     4143965187571810036998524623094178701929850165945836329191555613981570869318855742228769003523015273619542123656788664593692384999721512850776291158785366407703223069589234457949342497682832928768893891573167309296645574616899131186163156144965954794184173023963555858662730162250895428123048544923070806928498280048497292056566572897177038220740913043994829416817195412678670014777316212533292910471658371254081650186520928916549505621312412258672327758071000977732900861308244734379091615621670975855685464588244318343896751823067533154546808445747988206428208211293548435673696814740953140982221197696838647503903,
        #     1673605005130870213931711513196126221656806191626479450823369313377494688615830237769692843861381111706356074970843743650629570301239748744845759250675405468729418676808066174086661920073710855430822213113825529382601367015614969378527057500208653246508264835414031356006064104943636836737259544054449915605775227638769787867906737597981748292695491074121120121304974580587812770359071502161693134452327876571451756538446512342688322629752599997492037127719882245868538361927180941388107503987694773174515364321665516903520615284608328088270139225959413126790027030362652047838131548942645682460834089136717292037697,
        #     25006247042506893402844023790091496084090454682597512620920874575744083828296542415721742175803681823069492245481284461773071513811919538893383080930337879073054248136761022052023210530593755839525610293364837914865648735482962967354353604280199339971929822212534171187735707656380497500424505940376769025275900263054437990025865052994229762982962346679579673774634426890945041408193634767162060070163799442629716022120427083588139971122745360121086354021012359170712407580747218232310432813512094045766539475279126487498507489750891016585172979642695533387071266444308797900733449764406875018855331805811794360123946,
        #     6221087345673667983003457300009436675352423598075058663657647396438573088203383569401444249246803070211869128098884122118481145278771187799528099675678584561431005731841037710639041921625941011081893048126319644046598877440219364563329528947391470462529033249426599044699519694709363036687745660313253331644868055011332219326597869808717369297455198642220651512385701505508175455627469890317311005981360642132728969982882243537617540633196186388037031270784740045454793955905913388032703181542467219889171921526240495236314452854093301518338853866326737544906823393210272595460094846639013579982229101811556515849188,
        #     18182887883401930898790252997334812194564746147744562146478461351490799542360795668955429921996243221557047737520441201950639645248318248535053849729248805380822892358335246677021011042413587710305899989699250059174712094718318736969242798656708210234999368092582441642801614950708456505633522644655082536958368210791146251572958982204678720241816564554376140083804093056850111464288207949465549116253836219124589688825804016705370620520859435911393202109971406533737175222849191063680785534991692325475262983528506160234492471626315175416634638207179632803814065809759504852126695772539600630985624893289979247643434,
        #     19887110658100541788629990664619744684064090451301500104966027182928047913632029795501161842730698679131466844203906726591425977616152242188960432381626085544899023155982097073044048260524205517146941970751167240806934918675603854074487212986727038562330589629691887195532073753719037275635303236079940564517761262924085256443058061298584849403494947900362537334920233160281793930392896771871344818246616251911071312760672443573132761443458335256900504640954705088675618474233814395837488611204174611850222002027961058353158214682284967572646265133866964440058233673585595845660896952861927504023270140215644398523677]
        pk = [gp.powmod(self.g, self.msk[i], self.N2) for i in range(self.eta)]
        self.mpk = {'N': self.N, 'g': self.g, 'pk': pk}

    def generate_public_key(self):
        pk = list()
        for i in range(self.eta):
            pk.append(gp.digits(self.mpk['pk'][i]))  # digits(x, [base=10]) 返回一个以基数表示 x 的字符串。
        return pk

    def generate_private_key(self, y):
        assert len(y) == self.eta
        sk = np.dot(self.msk, y)
        # sk = gp.mpz(0)
        # for i in range(len(y)):
        #     sk = gp.add(sk, gp.mul(self.msk[i], y[i]))
        return sk

    def encrypt(self, pk, x):
        assert len(x) == self.eta
        r = random.randint(0, math.floor(self.N/4))
        ct0 = gp.digits(gp.powmod(self.g, gp.mpz(r), self.N2))
        ct_list = []
        for i in range(len(x)):
            ct_list.append(gp.digits(
                gp.powmod(gp.mul(
                    gp.t_mod(gp.add(gp.mpz(1), gp.mul(gp.mpz(int(x[i])), self.N)), self.N2),
                    gp.powmod(gp.mpz(pk[i]), r, self.N2)),
                gp.mpz(1), self.N2)
            ))
        ct = {'ct0': ct0, 'ct_list': ct_list}

        return ct

    def decrypt(self, sk, y, ct):
        res1 = gp.mpz(1)
        for i in range(len(y)):
            res1 = gp.mul(
                res1,
                gp.powmod(gp.mpz(ct['ct_list'][i]), gp.mpz(y[i]), self.N2)
            )
        res1 = gp.t_mod(res1, self.N2)
        res2 = gp.invert(gp.powmod(gp.mpz(ct['ct0']), gp.mpz(sk), self.N2), self.N2)
        # res2 = gp.powmod(gp.mpz(ct['ct0']), gp.mpz(-sk), self.N2)

        tmp1 = gp.t_mod(gp.mul(res1, res2), self.N2)

        tmp2 = (tmp1 - 1) // self.N % self.N2

        # if np.dot(x, y) < 0:
        if tmp2 >= self.N / 2:
            f = tmp2 - self.N
        else:
            f = tmp2

        return f

# d = 7
# eta = d+2
#
# test = FE(eta, 1024)
#
# max_value = math.floor(((test.N - 1/test.N) / eta) ** 0.5)
# x = [random.randint(0, max_value) for i in range(eta)]
# y = [random.randint(-max_value, max_value) for i in range(eta)]
#
# pk = test.generate_public_key()
# sk = test.generate_private_key(y)
#
# T1 = time.perf_counter()
# ct = test.encrypt(pk, x)
# # print("加密用时：", (eta-1)*(time.perf_counter() - T1))
# T2 = time.perf_counter()
# f = test.decrypt(sk, y, ct)
# # print("解密用时：", (eta-1)*(time.perf_counter() - T2))

# print("p是：", test.p)
# print("q是： ", test.q)
# print("N是： ", test.N)
# print("N2是 ", test.N2)
# print("g是 ", test.g)
# print("msk是 ", test.msk)
# error = np.dot(x, y) - f
#
# print("x为： ", x)
# print("y为： ", y)
#
# print("公钥为: ", pk)
#
# print("私钥为: ", sk)
#
# print("密文为 :", ct)
#
#
# print("解密结果为: ", f)
# print("内积为: ", np.dot(x, y))
# print("内积为: ", sum(i * j for i, j in zip(x, y)))
#
#
# print("差值", error)

# T3 = time.perf_counter()
# f1 = pow(5, 5)
# # print("f1=：", f1)
# # print("指数运算用时：", time.perf_counter() - T3)
# T4= time.perf_counter()
# f2 = 5*5
# # print("f2=：", f2)
# # print("乘法运算用时：", time.perf_counter() - T4)